// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnumType {
  admin
  super_moderator
  moderator
  promoter
  user
}

enum RarityEnumType {
  common
  uncommon
  rare
  legendary
  mythical
}

enum PokemonColorEnumType {
  colorless
  shiny
  dark
  golden
}

enum PokemonGenderEnumType {
  genderless
  male
  female
  unknown
}

enum RouteLocationEnumType {
  grass
  water
  tree
}

enum RewardEnumType {
  item
  coins
  pokemon
  pokemon_exp
  trainer_exp
  battle_points
}

enum DifficultyEnumType {
  easy
  medium
  hard
  expert
  master
}

model Reward {
  id Int @id @default(autoincrement())

  reward RewardEnumType? @default(coins)

  value String? @default("100")

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  npcs   NPCReward[]
  towers TowerReward[]

  @@map(name: "rewards")
}

model Item {
  id Int @id @default(autoincrement())

  name String

  rarity RarityEnumType? @default(common)

  max_amount Int?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  trainers        TrainerItem[]
  trainer_pokemon TrainerPokemon[]
  npc_pokemon     NPCPokemon[]
  route_pokemon   RoutePokemon[]
  tower_pokemon   TowerPokemon[]
  routes          RouteItem[]

  @@map(name: "items")
}

model Badge {
  id Int @id @default(autoincrement())

  name String

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  npcs      NPC[]
  gyms      Gym[]
  towers    Tower[]
  frontiers Frontier[]

  @@map(name: "badges")
}

model Pokemon {
  id Int @id @default(autoincrement())

  dex_id Int

  name String?

  species String?

  description String? @default("Nothing is known about this pokemon")

  type_1 String? @default("ghost")

  type_2 String? @default("")

  hp Int? @default(0)
  attack Int? @default(0)
  defense Int? @default(0)
  special_attack Int? @default(0)
  special_defense Int? @default(0)
  speed Int? @default(0)
  
  power Int? @default(0)

  hp_ev Int? @default(0)
  attack_ev Int? @default(0)
  defense_ev Int? @default(0)
  special_attack_ev Int? @default(0)
  special_defense_ev Int? @default(0)
  speed_ev Int? @default(0)

  base_exp  Int? @default(0)
  height  Int? @default(12)
  weight  Int? @default(1)
  capture_rate Int? @default(0)
  base_happiness Int? @default(0)
  is_baby Boolean? @default(false)
  is_legendary Boolean? @default(false)
  is_mythical Boolean? @default(false)
  hatch_counter Int? @default(0)
  has_gender_differences Boolean? @default(false)
  forms_switchable Boolean? @default(false)

  evolves_from Int?

  growth_rate String? @default("fluctuating")
  theme_color String? @default("black")
  shape String? @default("unknown")

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  abilities PokemonAbility[]
  moves PokemonMove[]
  routePokemon   RoutePokemon[]
  trainerPokemon TrainerPokemon[]
  npcPokemon     NPCPokemon[]
  towerPokemon   TowerPokemon[]

  @@map(name: "pokemon")
}

model Ability {
  id Int @id @default(autoincrement())

  name String?

  effect String?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  pokemon PokemonAbility[]

  @@map(name: "abilities")
}

model PokemonAbility {
  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  pokemon_id Int // relation scalar field (used in the `@relation` attribute above)

  ability    Ability @relation(fields: [ability_id], references: [id])
  ability_id Int // relation scalar field (used in the `@relation` attribute above)

  slot Int

  is_hidden Boolean

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@id([pokemon_id, ability_id])
  @@map(name: "pokemon_abilities")
}

model Move {
  id Int @id @default(autoincrement())

  name String?

  type String?

  class String?

  category String?

  ailment String?

  effect String?

  power Int? @default(1000)

  pp Int? @default(1)

  accuracy Int? @default(100)

  priority Int? @default(0)

  target String?

  contest_type String?

  min_hits Int?
  max_hits Int?
  min_turns Int?
  max_turns Int?
  drain Int?
  healing Int?
  crit_rate Int?
  ailment_chance Int?
  flinch_chance Int?
  stat_chance Int?

  hp Int?
  attack Int?
  defense Int?
  special_attack Int?
  special_defense Int?
  speed Int?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  pokemon PokemonMove[]

  @@map(name: "moves")
}

model PokemonMove {
  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  pokemon_id Int // relation scalar field (used in the `@relation` attribute above)

  move    Move @relation(fields: [move_id], references: [id])
  move_id Int // relation scalar field (used in the `@relation` attribute above)

  level Int? @default(0)
  method String? @default("machine")

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@id([pokemon_id, move_id])
  @@map(name: "pokemon_moves")
}

model Route {
  id Int @id @default(autoincrement())

  name String

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  pokemon RoutePokemon[]
  items   RouteItem[]

  @@map(name: "routes")
}

model RoutePokemon {
  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  pokemon_id Int // relation scalar field (used in the `@relation` attribute above)

  route    Route @relation(fields: [route_id], references: [id])
  route_id Int // relation scalar field (used in the `@relation` attribute above)

  level Int? @default(5)

  color PokemonColorEnumType? @default(colorless)

  gender PokemonGenderEnumType? @default(unknown)

  item Item? @relation(fields: [item_id], references: [id])

  item_id Int?

  location RouteLocationEnumType? @default(grass)

  encounter_chance Int? @default(0)

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@id([pokemon_id, route_id])
  @@map(name: "route_pokemon")
}

model RouteItem {
  item    Item @relation(fields: [item_id], references: [id])
  item_id Int // relation scalar field (used in the `@relation` attribute above)

  route    Route @relation(fields: [route_id], references: [id])
  route_id Int // relation scalar field (used in the `@relation` attribute above)

  location RouteLocationEnumType? @default(grass)

  encounter_chance Int? @default(0)

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@id([item_id, route_id])
  @@map(name: "route_items")
}

model NPC {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  coins Int? @default(0)

  badge_id Int?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  badge Badge? @relation(fields: [badge_id], references: [id])

  pokemon NPCPokemon[]

  rewards NPCReward[]

  gyms GymNpc[]

  frontiers FrontierNpc[]

  @@unique([name])
  @@map(name: "npcs")
}

model NPCPokemon {
  id Int @id @default(autoincrement())

  npc_id Int?

  pokemon    Pokemon @relation(fields: [pokemon_id], references: [id])
  pokemon_id Int // relation scalar field (used in the `@relation` attribute above)

  slot Int? @default(1)

  level Int? @default(4)

  item_id Int?

  color PokemonColorEnumType? @default(colorless)

  gender PokemonGenderEnumType? @default(unknown)

  ability String?

  move_1 String?
  move_2 String?
  move_3 String?
  move_4 String?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  npc NPC? @relation(fields: [npc_id], references: [id])

  item Item? @relation(fields: [item_id], references: [id])

  @@map(name: "npc_pokemon")
}

model NPCReward {
  reward    Reward @relation(fields: [reward_id], references: [id])
  reward_id Int // relation scalar field (used in the `@relation` attribute above)

  npc    NPC @relation(fields: [npc_id], references: [id])
  npc_id Int // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@id([reward_id, npc_id])
  @@map(name: "npc_rewards")
}

model Gym {
  id Int @id @default(autoincrement())

  name String @db.VarChar(255)

  difficulty DifficultyEnumType? @default(easy)

  badge_id Int?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  badge Badge? @relation(fields: [badge_id], references: [id])

  npc GymNpc[]

  @@unique([name])
  @@map(name: "gyms")
}

model GymNpc {
  gym    Gym @relation(fields: [gym_id], references: [id])
  gym_id Int // relation scalar field (used in the `@relation` attribute above)

  npc    NPC @relation(fields: [npc_id], references: [id])
  npc_id Int // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@id([gym_id, npc_id])
  @@map(name: "gym_npcs")
}

model Frontier {
  id Int @id @default(autoincrement())

  name String @db.VarChar(255)

  difficulty DifficultyEnumType? @default(easy)

  badge_id Int?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  badge Badge? @relation(fields: [badge_id], references: [id])

  npc FrontierNpc[]

  @@unique([name])
  @@map(name: "frontiers")
}

model FrontierNpc {
  frontier    Frontier @relation(fields: [frontier_id], references: [id])
  frontier_id Int // relation scalar field (used in the `@relation` attribute above)

  npc    NPC @relation(fields: [npc_id], references: [id])
  npc_id Int // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@id([frontier_id, npc_id])
  @@map(name: "frontier_npcs")
}

model Tower {
  id Int @id @default(autoincrement())

  name String @db.VarChar(255)

  difficulty DifficultyEnumType? @default(easy)

  badge_id Int?

  required_badge_id Int?
  required_trainer_level Int?
  required_team_level_min Int?
  required_team_level_max Int?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  badge Badge? @relation(fields: [badge_id], references: [id])

  pokemon TowerPokemon[]

  rewards TowerReward[]

  @@unique([name])
  @@map(name: "towers")
}

model TowerPokemon {
  id Int @id @default(autoincrement())

  tower_id Int?

  pokemon_id Int

  level Int? @default(4)

  item_id Int?

  color PokemonColorEnumType? @default(colorless)

  gender PokemonGenderEnumType? @default(unknown)

  ability String?

  move_1 String?
  move_2 String?
  move_3 String?
  move_4 String?

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  tower Tower? @relation(fields: [tower_id], references: [id])

  item Item? @relation(fields: [item_id], references: [id])

  pokemon Pokemon @relation(fields: [pokemon_id], references: [id])

  @@map(name: "tower_pokemon")
}

model TowerReward {
  reward    Reward @relation(fields: [reward_id], references: [id])
  reward_id Int // relation scalar field (used in the `@relation` attribute above)

  tower    Tower @relation(fields: [tower_id], references: [id])
  tower_id Int // relation scalar field (used in the `@relation` attribute above)

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@id([reward_id, tower_id])
  @@map(name: "tower_rewards")
}

model Trainer {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  role RoleEnumType? @default(user)

  starter Int? @default(1)

  level Int? @default(0)

  exp Int? @default(0)

  coins Int? @default(0)

  battle_points Int? @default(0)

  password String

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  pokemon TrainerPokemon[]
  items   TrainerItem[]

  @@unique([name])
  @@map(name: "trainers")
}

model TrainerItem {
  id Int @id @default(autoincrement())

  item_id Int

  trainer_id Int?

  amount Int? @default(1)

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  trainer Trainer? @relation(fields: [trainer_id], references: [id])

  item Item @relation(fields: [item_id], references: [id])

  market_items MarketItem[]

  @@map(name: "trainer_items")
}

model TrainerPokemon {
  id Int @id @default(autoincrement())

  trainer_id Int

  pokemon_id Int

  slot Int? @default(0)

  level Int? @default(4)

  item_id Int?

  color PokemonColorEnumType? @default(colorless)

  gender PokemonGenderEnumType? @default(unknown)

  ability String?

  move_1 String?
  move_2 String?
  move_3 String?
  move_4 String?

  exp Int? @default(0)

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  trainer Trainer? @relation(fields: [trainer_id], references: [id])

  item Item? @relation(fields: [item_id], references: [id])

  pokemon Pokemon @relation(fields: [pokemon_id], references: [id])

  market_pokemon MarketPokemon[]

  @@map(name: "trainer_pokemon")
}

model MarketPokemon {
  id Int @id @default(autoincrement())

  pokemon TrainerPokemon @relation(fields: [trainer_pokemon_id], references: [id])

  trainer_pokemon_id Int

  coins Int

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@map(name: "market_pokemon")
}

model MarketItem {
  id Int @id @default(autoincrement())

  item TrainerItem @relation(fields: [item_id], references: [id])

  item_id Int

  amount Int? @default(1)

  coins Int

  createdAt DateTime? @default(now())
  updatedAt DateTime  @updatedAt

  @@map(name: "market_items")
}
